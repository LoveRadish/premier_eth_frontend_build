{"version":3,"sources":["library/hooks/useServerApi.js","containers/Agent/AccountSettings/AdminCollections.js"],"names":["async","SuperFetch","url","method","body","authAxios","axios","create","baseURL","process","mode","headers","res","get","post","data","dataFetchReducer","state","action","type","loading","error","payload","slice","limit","total","length","Error","useServerApi","initialUrl","initialData","setUrl","useState","dispatch","useReducer","useEffect","didCancel","result","fetchData","loadMoreData","doFetch","columns","title","dataIndex","sorter","a","b","id","onFilter","value","record","name","indexOf","localeCompare","totalTokenMinted","price","render","text","to","toString","onChange","pagination","filters","extra","console","log","AdminCollections","isEmpty","dataSource"],"mappings":"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","file":"static/js/49.13eada0b.chunk.js","sourcesContent":["import { useState, useReducer, useEffect } from 'react';\nimport axios from 'axios';\n\nasync function SuperFetch(\n  url,\n  method = 'GET',  \n  body = {}\n) {\n  const authAxios = axios.create({\n    baseURL: process.env.REACT_APP_SERVER_URL, //YOUR_API_URL HERE\n    mode:'no-cors',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n\n  let res = {};\n  if(method == \"GET\")\n    res = await authAxios.get(url, body);\n  else if(method == \"POST\")\n    res = await authAxios.post(url, body);\n  return res.data;\n}\n\nfunction dataFetchReducer(state, action) {\n  switch (action.type) {\n    case 'FETCH_INIT':\n      return {\n        ...state,\n        loading: true,\n        error: false,\n      };\n    case 'FETCH_SUCCESS':\n      return {\n        ...state,\n        data: action.payload.slice(0, state.limit),\n        total: action.payload,\n        loading: false,\n        error: false,\n      };\n    case 'FETCH_FAILURE':\n      return {\n        ...state,\n        loading: false,\n        error: true,\n      };\n    case 'LOAD_MORE':\n      return {\n        ...state,\n        data: [\n          ...state.data,\n          ...state.total.slice(\n            state.data.length,\n            state.data.length + state.limit\n          ),\n        ],\n        loading: false,\n        error: false,\n      };\n    default:\n      throw new Error();\n  }\n}\n\nconst useServerApi = (initialUrl, method = 'GET', body = {}, limit = 10, initialData = []) => {\n  const [url, setUrl] = useState(initialUrl);\n\n  const [state, dispatch] = useReducer(dataFetchReducer, {\n    loading: false,\n    error: false,\n    data: initialData,\n    total: initialData,\n    limit: limit,\n  });\n\n  useEffect(() => {\n    let didCancel = false;\n\n    const fetchData = async () => {\n      dispatch({ type: 'FETCH_INIT' });\n\n      try {\n        const result = await SuperFetch(url, method, body);        \n        if (!didCancel && result.data) {\n          dispatch({ type: 'FETCH_SUCCESS', payload: result.data });\n        }\n      } catch (error) {\n        if (!didCancel) {\n          dispatch({ type: 'FETCH_FAILURE' });\n        }\n      }\n    };\n\n    fetchData();\n\n    return () => {\n      didCancel = true;\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [url]);\n  const loadMoreData = () => {\n    dispatch({ type: 'LOAD_MORE' });\n  };\n  const doFetch = (url) => {\n    setUrl(url);\n  };\n\n  return { ...state, doFetch, loadMoreData };\n};\n\nexport default useServerApi;\n","import React from 'react';\nimport Loader from 'components/Loader/Loader';\nimport useServerApi from 'library/hooks/useServerApi';\nimport { Table } from 'antd';\nimport isEmpty from 'lodash/isEmpty';\nimport { Link } from 'react-router-dom';\n\nconst columns = [\n  {\n    title: 'ID',\n    dataIndex: 'id',    \n    sorter: (a, b) => a.id - b.id,\n  },\n  {\n    title: 'Name',\n    dataIndex: 'name',    \n    onFilter: (value, record) => record.name.indexOf(value) === 0,\n    sorter: (a, b) => a.name.localeCompare(b.name),\n  },\n  {\n    title: 'From',\n    dataIndex: 'from',        \n  },\n  {\n    title: 'To',\n    dataIndex: 'to',        \n  },\n  {\n    title: 'Minted Tokens',\n    dataIndex: 'totalTokenMinted',    \n    sorter: (a, b) => a.totalTokenMinted - b.totalTokenMinted,\n  },\n  {\n    title: 'Price',\n    dataIndex: 'price',\n    sorter: (a, b) => a.price - b.price,\n    render: (text) => <span>{text} ETH</span>,\n  },\n  {\n      title: 'Action', \n      dataIndex: 'id',\n      render: (id) => <Link to={id.toString()}> Set Price </Link>,\n  }\n];\n\nconst onChange = (pagination, filters, sorter, extra) => {\n  console.log('params', pagination, filters, sorter, extra);\n};\n\nexport default function AdminCollections() {\n\n  let url = '/getAllCollectionsInfo';\n  const { data, loading } = useServerApi(url, \"GET\", {}, 100);  \n  if (isEmpty(data) || loading) return <Loader />;\n\n  return (\n    <div>\n      <Table columns={columns} dataSource={data} onChange={onChange} />\n    </div>\n  );\n}\n"],"sourceRoot":""}