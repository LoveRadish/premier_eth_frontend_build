{"version":3,"sources":["components/UI/HtmlLabel/HtmlLabel.js","web3/Premier.js","components/UI/Base.js"],"names":["LabelWrapper","styled","base","fontFamily","fontWeight","textAlign","lineHeight","letterSpacing","themed","HtmlLabel","htmlFor","content","props","Web3","require","setNftPrice","async","price","address","window","ethereum","web3","enable","currentProvider","alert","console","log","process","Premier","contractAddress","utils","toChecksumAddress","contract","eth","Contract","abi","e","correctPrice","toBN","toWei","toString","u","methods","setPrice","estimateGas","from","success","type","c","d","getGasPrice","send","gas","parseInt","gasPrice","maxFeePerGas","status","approveAll","stakingContractAddress","setApprovalForAll","setPause","doAirDrop","_collectionId","_addrs","_tokenAmounts","collectionID","addrs","tokenAmounts","giftMint","mintNft","tokenAmount","timestamp","collectionId","mint","value","key","theme","compose","boxSizing","space","width","minWidth","maxWidth","height","minHeight","maxHeight","fontSize","color","flex","order","alignSelf","borders","borderColor","display","propTypes"],"mappings":"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","file":"static/js/8.2d57d1b3.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport {\n  fontFamily,\n  fontWeight,\n  textAlign,\n  lineHeight,\n  letterSpacing,\n} from 'styled-system';\nimport { base, themed } from '../Base';\n\nconst LabelWrapper = styled('label')(\n  base,\n  fontFamily,\n  fontWeight,\n  textAlign,\n  lineHeight,\n  letterSpacing,\n  themed('Heading')\n);\n\nconst HtmlLabel = ({ htmlFor, content, ...props }) => {\n  return (\n    <LabelWrapper htmlFor={htmlFor} {...props}>\n      {content}\n    </LabelWrapper>\n  );\n};\n\nHtmlLabel.propTypes = {\n  htmlFor: PropTypes.string,\n  content: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  fontFamily: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.arrayOf(\n      PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n    ),\n  ]),\n  fontWeight: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.arrayOf(\n      PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n    ),\n  ]),\n  textAlign: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.arrayOf(\n      PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n    ),\n  ]),\n  lineHeight: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.arrayOf(\n      PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n    ),\n  ]),\n  letterSpacing: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.arrayOf(\n      PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n    ),\n  ]),\n  ...base.propTypes,\n};\n\nexport default HtmlLabel;\n","var Web3 = require(\"web3\");\r\n\r\nconst mintNft = async (price, tokenAmount, timestamp, collectionId, address) => {\r\n    if (window.ethereum) {\r\n        window.web3 = new Web3(window.ethereum);\r\n        window.ethereum.enable();\r\n    } else if (window.web3) {\r\n        window.web3 = new Web3(window.web3.currentProvider);\r\n    } else {\r\n        window.alert(\r\n            \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\r\n        );\r\n    }\r\n    var web3 = window.web3;\r\n    \r\n    const Premier = require(\"./Premier.json\");\r\n    const contractAddress = web3.utils.toChecksumAddress(process.env.REACT_APP_PREMIER_ADDRESS);\r\n    const contract = new web3.eth.Contract(Premier.abi, contractAddress);\r\n    \r\n    let e;\r\n    try {\r\n        var correctPrice = web3.utils.toBN(\r\n            web3.utils.toWei(price, \"ether\").toString()\r\n        );\r\n    } catch (u) {\r\n        console.log('err', u);\r\n    }\r\n    try {\r\n        e = await contract.methods.mint(collectionId, tokenAmount, timestamp).estimateGas({\r\n            value: correctPrice * tokenAmount,\r\n            from: address\r\n        })        \r\n    } catch (u) {\r\n        return { success: false, type: 'estimategas' }\r\n    }\r\n    let d = await web3.eth.getGasPrice();\r\n    let c;\r\n    \r\n    try {\r\n        c = await contract.methods.mint(collectionId, tokenAmount, timestamp).send({\r\n            from: address,\r\n            gas: parseInt(e),\r\n            gasPrice: parseInt(1.2 * d),\r\n            value: correctPrice * tokenAmount,\r\n            maxFeePerGas: null,\r\n        })\r\n    } catch (u) {\r\n        console.log(u);\r\n        return {success: false, type:\"mint\"};\r\n    }\r\n\r\n    if(c){\r\n        return {success: c.status, type:\"mint\"};\r\n    }\r\n}\r\n\r\nexport const setNftPrice = async (price, address) => {\r\n    if (window.ethereum) {\r\n        window.web3 = new Web3(window.ethereum);\r\n        window.ethereum.enable();\r\n    } else if (window.web3) {\r\n        window.web3 = new Web3(window.web3.currentProvider);\r\n    } else {\r\n        window.alert(\r\n            \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\r\n        );\r\n    }\r\n    var web3 = window.web3;\r\n    console.log(process.env.REACT_APP_PREMIER_ADDRESS);\r\n    const Premier = require(\"./Premier.json\");\r\n    const contractAddress = web3.utils.toChecksumAddress(process.env.REACT_APP_PREMIER_ADDRESS);\r\n    const contract = new web3.eth.Contract(Premier.abi, contractAddress);\r\n    \r\n    let e;\r\n    try {\r\n        var correctPrice = web3.utils.toBN(\r\n            web3.utils.toWei(price, \"ether\").toString()\r\n        );\r\n    } catch (u) {\r\n        console.log('err', u);\r\n    }\r\n    try {\r\n        e = await contract.methods.setPrice(correctPrice).estimateGas({            \r\n            from: address\r\n        })        \r\n    } catch (u) {\r\n        return { success: false, type: 'estimategas' }\r\n    }\r\n    let d = await web3.eth.getGasPrice();\r\n    let c;\r\n    \r\n    try {\r\n        c = await contract.methods.setPrice(correctPrice).send({\r\n            from: address,\r\n            gas: parseInt(e),\r\n            gasPrice: parseInt(1.2 * d),\r\n            maxFeePerGas: null,\r\n        })\r\n    } catch (u) {\r\n        return {success: false, type:\"setPrice\"};\r\n    }\r\n\r\n    if(c){\r\n        return {success: c.status, type:\"setPrice\"};\r\n    }\r\n}\r\n\r\nexport const approveAll = async (address) => {\r\n    if (window.ethereum) {\r\n        window.web3 = new Web3(window.ethereum);\r\n        window.ethereum.enable();\r\n    } else if (window.web3) {\r\n        window.web3 = new Web3(window.web3.currentProvider);\r\n    } else {\r\n        window.alert(\r\n            \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\r\n        );\r\n    }\r\n    var web3 = window.web3;\r\n    \r\n    const Premier = require(\"./Premier.json\");\r\n    const contractAddress = web3.utils.toChecksumAddress(process.env.REACT_APP_PREMIER_ADDRESS);\r\n    const contract = new web3.eth.Contract(Premier.abi, contractAddress);\r\n    const stakingContractAddress = process.env.REACT_APP_PREMIER_STAKING_ADDRESS;\r\n\r\n    let e;\r\n\r\n    try {\r\n        e = await contract.methods.setApprovalForAll(stakingContractAddress, true).estimateGas({            \r\n            from: address\r\n        })        \r\n    } catch (u) {\r\n        return { success: false, type: 'estimategas' }\r\n    }\r\n    let d = await web3.eth.getGasPrice();\r\n    let c;\r\n    \r\n    try {\r\n        c = await contract.methods.setApprovalForAll(stakingContractAddress, true).send({\r\n            from: address,\r\n            gas: parseInt(e),\r\n            gasPrice: parseInt(1.2 * d),\r\n            maxFeePerGas: null,\r\n        })\r\n    } catch (u) {\r\n        return {success: false, type:\"setApprovalForAll\"};\r\n    }\r\n\r\n    if(c){\r\n        return {success: c.status, type:\"setApprovalForAll\"};\r\n    }\r\n}\r\n\r\nexport const setPause = async (status, address) => {\r\n    if (window.ethereum) {\r\n        window.web3 = new Web3(window.ethereum);\r\n        window.ethereum.enable();\r\n    } else if (window.web3) {\r\n        window.web3 = new Web3(window.web3.currentProvider);\r\n    } else {\r\n        window.alert(\r\n            \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\r\n        );\r\n    }\r\n    var web3 = window.web3;\r\n    \r\n    const Premier = require(\"./Premier.json\");\r\n    const contractAddress = web3.utils.toChecksumAddress(process.env.REACT_APP_PREMIER_ADDRESS);\r\n    const contract = new web3.eth.Contract(Premier.abi, contractAddress);\r\n\r\n    let e;\r\n\r\n    try {\r\n        e = await contract.methods.setPause(status).estimateGas({            \r\n            from: address\r\n        })        \r\n    } catch (u) {\r\n        return { success: false, type: 'estimategas' }\r\n    }\r\n    let d = await web3.eth.getGasPrice();\r\n    let c;\r\n    \r\n    try {\r\n        c = await contract.methods.setPause(status).send({\r\n            from: address,\r\n            gas: parseInt(e),\r\n            gasPrice: parseInt(1.2 * d),\r\n            maxFeePerGas: null,\r\n        })\r\n    } catch (u) {\r\n        return {success: false, type:\"setPause\"};\r\n    }\r\n\r\n    if(c){\r\n        return {success: c.status, type:\"setPause\"};\r\n    }\r\n}\r\n\r\nexport const doAirDrop = async (_collectionId, _addrs, _tokenAmounts, address) => {\r\n    if (window.ethereum) {\r\n        window.web3 = new Web3(window.ethereum);\r\n        window.ethereum.enable();\r\n    } else if (window.web3) {\r\n        window.web3 = new Web3(window.web3.currentProvider);\r\n    } else {\r\n        window.alert(\r\n            \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\r\n        );\r\n    }\r\n    var web3 = window.web3;\r\n    \r\n    const Premier = require(\"./Premier.json\");\r\n    const contractAddress = web3.utils.toChecksumAddress(process.env.REACT_APP_PREMIER_ADDRESS);\r\n    const contract = new web3.eth.Contract(Premier.abi, contractAddress);\r\n\r\n    let e;\r\n\r\n    let collectionID = _collectionId - 1;\r\n    let addrs = [_addrs];\r\n    let tokenAmounts = [_tokenAmounts];\r\n\r\n    try {\r\n        e = await contract.methods.giftMint(collectionID, addrs, tokenAmounts).estimateGas({            \r\n            from: address\r\n        })        \r\n    } catch (u) {\r\n        return { success: false, type: 'estimategas' }\r\n    }\r\n    let d = await web3.eth.getGasPrice();\r\n    let c;\r\n    \r\n    try {\r\n        c = await contract.methods.giftMint(collectionID, addrs, tokenAmounts).send({\r\n            from: address,\r\n            gas: parseInt(e),\r\n            gasPrice: parseInt(1.2 * d),\r\n            maxFeePerGas: null,\r\n        })\r\n    } catch (u) {\r\n        console.log(u);\r\n        return {success: false, type:\"doAirDrop\"};\r\n    }\r\n\r\n    if(c){\r\n        return {success: c.status, type:\"doAirDrop\"};\r\n    }\r\n}\r\n\r\nexport default mintNft;","/** This is our base component every components must be extend it. */\nimport {\n  space,\n  borders,\n  borderColor,\n  width,\n  minWidth,\n  maxWidth,\n  height,\n  minHeight,\n  maxHeight,\n  display,\n  fontSize,\n  flex,\n  order,\n  alignSelf,\n  color,\n  compose,\n} from 'styled-system';\n\nexport const themed = (key) => (props) => props.theme[key];\n\nexport const base = compose(\n  () => ({ boxSizing: 'border-box' }),\n  space,\n  width,\n  minWidth,\n  maxWidth,\n  height,\n  minHeight,\n  maxHeight,\n  fontSize,\n  color,\n  flex,\n  order,\n  alignSelf,\n  borders,\n  borderColor,\n  display\n);\n\nbase.propTypes = {\n  ...display.propTypes,\n  ...space.propTypes,\n  ...borders.propTypes,\n  ...borderColor.propTypes,\n  ...width.propTypes,\n  ...height.propTypes,\n  ...fontSize.propTypes,\n  ...color.propTypes,\n  ...flex.propTypes,\n  ...order.propTypes,\n  ...alignSelf.propTypes,\n};\n"],"sourceRoot":""}